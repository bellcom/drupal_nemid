<?php
/**
 * @file
 * Based on https://code.google.com/p/nemid-php/ which is under the MIT licences
 * The following documents where used to implement the Javascript client:
 * - http://www.nets.eu/dk-da/Service/kundeservice/nemid-tu/NemID-tjenesteudbyderpakken-okt-2014/Documents/Konfiguration%20og%20ops%C3%A6tning.pdf
 * - http://www.nets.eu/dk-da/Service/kundeservice/nemid-tu/NemID-tjenesteudbyderpakken-okt-2014/Documents/NemID%20Integration%20-%20OCES.pdf
 * @author Henrik Farre <hf@bellcom.dk>
 */

require dirname(__FILE__).'/lib/Nemid.php';

/**
 * Implements hook_menu().
 */
function drupal_nemid_login_menu() {
  $items['nemid'] = array(
    'title'            => t('NemID login page'),
    'page callback'    => '_drupal_nemid_login_page',
    'page arguments'   => array(),
    'access arguments' => array('View published content'),
    'type'             => MENU_CALLBACK,
  );

  $items['nemid/verify'] = array(
    'title'            => t('NemID login verify'),
    'page callback'    => '_drupal_nemid_login_verify',
    'page arguments'   => array(),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/config/system/nemid'] = array(
    'title'            => t('Configure NemID'),
    'description'      => t('Configure NemID settings'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_drupal_nemid_login_admin'),
    'access arguments' => array('access administration pages'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function drupal_nemid_login_block_info() {
  $blocks['nemid_login'] = array(
    'info' => t('NemID login block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function drupal_nemid_login_block_view($delta = '') {
  // TODO: <meta http-equiv="X-UA-Compatible" content="IE=edge">
  // see http://www.nets.eu/dk-da/Service/kundeservice/nemid-tu/NemID-tjenesteudbyderpakken-okt-2014/Documents/NemID%20Integration%20-%20OCES.pdf

  $block = array();
  switch ($delta) {
    case 'nemid_login':
      Global $user;
      if($user->uid == '0' || drupal_nemid_login_check_user_pid()) {
        $block['subject'] = t('NemID Login');
        $block['content'] = theme('nemid_login_block', array(
          'params' => _drupal_nemid_login_get_params(),
          'settings' => _drupal_nemid_login_get_settings()
        ));
      }
    break;
  }

  return $block;
}

function _drupal_nemid_login_page() {
  return theme('nemid_login_block', array(
    'params' => _drupal_nemid_login_get_params(),
    'settings' => _drupal_nemid_login_get_settings()
  ));
}

/**
 * Implements hook_theme().
 */
function drupal_nemid_login_theme($existing, $type, $theme, $path) {
  return array(
    'nemid_login_block' => array(
      'path'      => drupal_get_path('module', 'drupal_nemid_login') . '/templates',
      'template'  => 'block',
      'variables' => array('params' => NULL, 'settings' => NULL),
    ),
  );
}

function stripCertificate($toBeStripped) {
  $result = str_replace("\n", "", $toBeStripped);
  $result = str_replace("\r", "", $result);
  $result = str_replace("-----BEGIN CERTIFICATE-----", "", $result);
  $result = str_replace("-----END CERTIFICATE-----", "", $result);

  return $result;
}

function _drupal_nemid_login_get_params() {
  $nemidlogin = new WAYF\nemidlogin();
  $config = _drupal_nemid_login_get_config_object();
  $oldParams = $nemidlogin->prepareparamsfornemid($config);

  $millisec = strval(intval(microtime(true))*1000);

  $params = [
    "SP_CERT"          => stripCertificate($oldParams['paramcert']),
    "CLIENTFLOW"       => "OCESLOGIN2",
    "SIGN_PROPERTIES"  => "challenge=". $millisec,
    "TIMESTAMP"        => $millisec,
  ];

  uksort($params, "strnatcasecmp");

  $normalized = '';
  foreach ($params as $name => $value) {
    $normalized .= $name . $value;
  }

  $utfparams = mb_convert_encoding($normalized, "UTF-8", "auto");
  $paramsdigest = hash('sha256', $utfparams, true);
  $params['PARAMS_DIGEST'] = base64_encode($paramsdigest);

  $key = openssl_pkey_get_private($config->privatekey, $config->privatekeypass);
  openssl_sign($utfparams, $signature, $key, 'sha256');

  $params['DIGEST_SIGNATURE'] = base64_encode($signature);

  $encodedParams = json_encode($params, JSON_UNESCAPED_SLASHES);

  return $encodedParams;
}

function _drupal_nemid_login_get_settings() {
  $millisec = round(microtime(TRUE) * 1000);
  $variablePrefix = 'nemid_login_';
  $mode = variable_get($variablePrefix.'mode', 'test');

  $baseUrl = variable_get($variablePrefix.'base_url_'.$mode);
  $ui_mode = variable_get($variablePrefix.'ui_mode_'.$mode, 'std');

  $settings = array(
    'iframe_url'    => $baseUrl.'/launcher/'.$ui_mode.'/'.$millisec,
    'danid_baseurl' => $baseUrl,
  );

  return $settings;
}

function _drupal_nemid_login_verify() {
  $DISABLE_OCSP_CHECK = TRUE;

  if ( isset($_POST['response']) ) {
    require dirname(__FILE__).'/lib/nemid-error-codes.php';
    $response = base64_decode($_POST['response']);

    if (isset($errorcodes[$response])) {
      drupal_set_message(t($errorcodes[$response]['description']), 'error');
      $_SESSION['nemid_login'] = array();
      $_SESSION['nemid_login']['errors'] = $errorcodes[$response];
      drupal_goto('<front>');
    }
    else {
      $_SESSION['nemid_login'] = array();

      $trustedrootdigests = new StdClass();
      $trustedrootdigests->trustedrootdigests = array(
        'productionRootOces' => '92d8092ee77bc9208f0897dc05271894e63ef27933ae537fb983eef0eae3eec8',
      );

      $nemid = new WAYF\NemidCertificateCheck();
      try
      {
        $certificate = $nemid->checkAndReturnCertificate($_POST['response'], FALSE, $trustedrootdigests, $DISABLE_OCSP_CHECK);
        $subject = end($certificate['tbsCertificate']['subject']);
        $pid = $subject['serialNumber'];
        $cn = $subject['commonName'];
        $config = _drupal_nemid_login_get_config_object();
        $cpr = $nemid->pidCprRequest($config, $pid);
        drupal_set_message(t('Login ok: cn @cn cpr @cpr pid @pid', array('@cn' => $cn, "@cpr"=>$cpr, "@pid" => $pid)), 'success');
        drupal_goto('<front>');
      }
      catch (Exception $e) {
        echo $e->getMessage();
      }
    }
  }
}

function _drupal_nemid_login_admin() {
  $form = array();

  $variablePrefix = 'nemid_login_';
  $modes = array('test', 'live');
  $current_mode = variable_get('nemid_login_mode');

  $sharedFields = array(
    'certificate'           => array('type' => 'textarea', 'title' => t('Certificate')),
    'private_key'           => array('type' => 'textarea', 'title' => t('Private key')),
    'private_key_password'  => array('type' => 'password', 'title' => t('Private key password')),
    'base_url'              => array('type' => 'textfield', 'title' => t('Base url')),
    'ui_mode'               => array('type' => 'radios', 'title' => t('UI mode'), 'options' => array('std' => t('Standard'), 'lmt' => t('Limited'))),
    'serviceid'             => array('type' => 'textfield', 'title' => t('Service ID')),
    'certificateandkey'     => array('type' => 'textfield', 'title' => t('Path to PEM with certificate and key')),
  );

  $form[$variablePrefix.'mode'] = array(
    '#type' => 'radios',
    '#title' => t('NemID mode'),
    '#default_value' => variable_get($variablePrefix.'mode', 'test'),
    '#options' => array(
      'live' => t('Live'),
      'test' => t('Test'),
    ),
  );

  foreach ($modes as $mode) {
    $form[$variablePrefix.$mode] = array(
      '#title' => t('Settings for '. $mode.' mode'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($sharedFields as $fieldKey => $field) {
      $form[$variablePrefix.$mode][$variablePrefix.$fieldKey.'_'.$mode] = array(
        '#type' => $field['type'],
        '#title' => $field['title'],
        '#default_value' => variable_get($variablePrefix.$fieldKey.'_'.$mode, NULL),
        '#required' => TRUE,
      );

      if ($field['type'] == 'radios') {
        $form[$variablePrefix.$mode][$variablePrefix.$fieldKey.'_'.$mode]['#options'] = $field['options'];
      }
    }
  }
  return system_settings_form($form);
}

function _drupal_nemid_login_get_config_object() {
  $variablePrefix = 'nemid_login_';
  $mode = variable_get($variablePrefix.'mode', 'test');
  $search  = array("\r\n", "-----BEGIN CERTIFICATE-----\n", "\n-----END CERTIFICATE-----\n");
  $replace = array("\n", "", "");

  if ($mode == 'live') {
    $server = 'https://pidws.certifikat.dk/pid_serviceprovider_server/pidxml/';
  } else {
    $server = 'https://pidws.pp.certifikat.dk/pid_serviceprovider_server/pidxml/';
  }

  $config = new StdClass();
  $config->server          = $server;
  $config->privatekey      = str_replace($search, $replace, variable_get($variablePrefix.'private_key_'.$mode));
  $config->privatekeypass  = variable_get($variablePrefix.'private_key_password_'.$mode);
  $config->certificate     = str_replace($search, $replace, variable_get($variablePrefix.'certificate_'.$mode));
  $config->serverurlprefix = variable_get($variablePrefix.'base_url_'.$mode);
  $config->serviceid       = variable_get($variablePrefix.'serviceid_'.$mode);
  $config->certificateandkey = variable_get($variablePrefix.'certificateandkey_'.$mode);
  $config->nonceprefix       = 'nemid-test-';
 // $config->certificateandkey_str = variable_get($variablePrefix.'certificate_'.$mode) . variable_get($variablePrefix.'private_key_'.$mode);
  return $config;
}

function drupal_nemid_login_webform_component_info() {
  $components = array();
  $components['nemid_cpr'] = array(
    'label' => t('NemID CPR'),
    'description' => t('Create CPR field.'),
    'name' => 'nemid_cpr',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 1,
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/nemid_cpr.inc',
  );
  $components['nemid_name'] = array(
    'label' => t('NemID Name'),
    'description' => t('Create NemID name field.'),
    'name' => 'nemid_name',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 1,
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/nemid_name.inc',
  );
  $components['nemid_coaddress'] = array(
    'label' => t('NemID C/O address'),
    'description' => t('Create NemID C/O-address field.'),
    'name' => 'nemid_coaddress',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 1,
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/nemid_coaddress.inc',
  );
  $components['nemid_address'] = array(
    'label' => t('NemID Address'),
    'description' => t('Create NemID address field.'),
    'name' => 'nemid_address',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 1,
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/nemid_address.inc',
  );
  $components['nemid_city'] = array(
    'label' => t('NemID Postal / City'),
    'description' => t('Create NemID Postal code / city field.'),
    'name' => 'nemid_city',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 1,
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'components/nemid_city.inc',
  );
  return $components;
}

function drupal_nemid_login_get_block_tab_ul() {
  $login_methods = drupal_nemid_login_get_login_methods();

  $count = 0;
  $output = '<ul class="nav nav-tabs">';
  foreach ($login_methods as $key => $method) {
    if ($method) {
      $count++;
      $class = ($count == 1) ? 'active' : '';
      $output .= '<li class="' . $class .'"><a data-toggle="tab" href="#' . $key .'">'. ucfirst($method) . '</a></li>';
    }
  }
  $output .= '</ul>';

  return $output;
}

function drupal_nemid_login_get_block_tab_content($settings, $returnUrl = '') {

  $login_methods = drupal_nemid_login_get_login_methods();

  $count = 0;
  $output = '<div class="tab-content">';
  foreach ($login_methods as $key => $method) {
    if ($method) {
      $count++;
      $class = ($count == 1) ? 'in active' : '';
      $output .= '<div id="' . $key .'" class="tab-pane fade ' . $class . '">';

      if ($method == 'nemid') {
        $output .= drupal_nemid_login_get_default_frame($settings);
      }
      elseif ($method == 'nemid_sg') {
        $data = drupal_nemid_login_sg_get_frame($method, $returnUrl);
        $output .= $data[$method]['script'];
        $output .= '<iframe src="' . $data[$method]['iframe_url'] . '" scrolling="no"
        style="position:relative; width: 200px; height: 250px; border: none; margin: 0; padding: 0;"></iframe>';
      }
      // TODO Ajax get nemid_sign_pdf or nemid_sign_text iframe.
      $output .= '</div>';
    }
  }
  $output .= '</div>';
  return $output;
}

function drupal_nemid_login_get_default_frame($settings) {

  return '<iframe id="nemid_iframe" title="NemID" allowfullscreen="true" scrolling="no" frameborder="0"
                  style="width:500px;height:450px;border:0" src="' . $settings['iframe_url'] .'"></iframe>
          <form name="postBackForm" action="' . url('nemid/verify') .'" method="post">
            <input type="hidden" name="response" value=""/>
          </form>';
}

function drupal_nemid_login_get_login_methods() {

  if (!module_exists('drupal_nemid_login_sg')) {
    $login_methods = array('nemid' => 'nemid');
  }
  else {
    $login_methods = variable_get('nemid_login_sg_login_methods', array('nemid' => 'nemid', 'nemid_sg' => 'nemid_sg'));
  }
  return $login_methods;
}

function drupal_nemid_login_check_user_pid() {
  global $user;
  $user = user_load($user->uid);
  if ($pid = field_get_items('user', $user, 'field_nemid_pid')) {
    if ($pid[0]['value']) {
      return FALSE;
    }
  }
  return TRUE;
}
